server:
  port: 8557 # 服务启动端口，应用将监听这个端口来接收请求

spring:
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: com.mysql.cj.jdbc.Driver # 指定使用的 MySQL JDBC 驱动类
    url: jdbc:mysql://127.0.0.1:3306/cloud?useSSL=false # 数据库连接 URL，连接到本地 MySQL 数据库的 `cloud` 数据库，禁用 SSL
    username: root # 数据库用户名，用于连接 MySQL 数据库
    password: 24211 # 数据库密码，与用户名一起用于连接 MySQL 数据库
    #   Druid数据源配置
    # 初始连接数
    initialSize: 5
    # 最小连接池数量
    minIdle: 10
    # 最大连接池数量
    maxActive: 20
    # 配置获取连接等待超时的时间
    maxWait: 60000
    # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
    timeBetweenEvictionRunsMillis: 60000
    # 配置一个连接在池中最小生存的时间，单位是毫秒
    minEvictableIdleTimeMillis: 300000
    # 配置一个连接在池中最大生存的时间，单位是毫秒
    maxEvictableIdleTimeMillis: 900000
    # 配置检测连接是否有效
    validationQuery: SELECT 1 FROM DUAL
    #申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
    testWhileIdle: true
    #配置从连接池获取连接时，是否检查连接有效性，true每次都检查；false不检查。做了这个配置会降低性能。
    testOnBorrow: false
    #配置向连接池归还连接时，是否检查连接有效性，true每次都检查；false不检查。做了这个配置会降低性能。
    testOnReturn: false
    #打开PsCache，并且指定每个连接上PSCache的大小
    poolPreparedStatements: true
    maxPoolPreparedStatementPerConnectionSize: 20
    #   配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
    filters: stat,wall,log4j
    #合并多个DruidDatasource的监控数据
    useGlobalDataSourceStat: true
    #通过connectProperties属性来打开mergesql功能罗慢sQL记录
    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500;

  application:
    name: user-service # 定义应用程序名称，用于 Eureka 服务注册和标识

eureka:
  client:
    service-url:
      defaultZone: http://127.0.0.1:9986/eureka # Eureka 服务器地址，客户端将使用这个地址与 Eureka 服务器进行通信

  instance:
    prefer-ip-address: true # 配置 Eureka 实例优先使用 IP 地址进行注册，通常用于避免 DNS 解析带来的问题

mybatis:
  type-aliases-package: users.pojo # MyBatis 别名包，指定 MyBatis 使用的别名包，用于简化实体类的引用
  configuration:
    map-underscore-to-camel-case: true # 启用下划线转驼峰命名规则，将数据库表字段名中的下划线转为驼峰式属性名

logging:
  level:
    users: debug # 设置 `users` 包的日志级别为 `debug`，用于更详细的调试日志输出
  pattern:
    dateformat: MM-dd HH:mm:ss:SSS # 设置日志输出的日期格式为月-日 时:分:秒:毫秒

# Ribbon负载均衡的第二种实现方式。
# user-service: # 给某个微服务配置负载均衡规则，这里是user-service服务
#   ribbon:
#    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule # 负载均衡规则

ribbon:
  eager-load:
    enabled: true #开启饥饿加载
    clients: userservice  #指定对userservice这个服务开启饥饿加载